//乘方函数
@function pow($number, $exp){
  $value: 1;
  @if $exp > 0{
    @for $i from 1 through $exp{
      $value: $value * $number;
    }
  }
  @else if $exp < 0{
    @for $i from 1 through -$exp{
      $value: $value / $number;
    }
  }
  @return $value;
}

//阶乘函数
@function fact($number){
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number{
      $value: $value * $i;
    }
  }
  @return $value;
}

//开根号函数
@function fabs($x) {
	@if $x > 0 {
		@return $x;
	}
	@else {
		@return $x * -1;
	}
}
@function sqrt($x) {
    $ans: $x;
    $del: 0.00001;
    $pre: 0;
    @while fabs($ans - $pre) >= $del {
        $pre: $ans;
        $ans: ($ans + $x / $ans) / 2;
    }
    @return $ans;
}

//常数π
@function pi(){
   @return 3.14159265359;
}

//弧度函数
@function rad($angle){
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

//正弦函数
@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

//余弦函数
@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

//正切函数
@function tan($angle) {
  @return sin($angle) / cos($angle);
}

//余切函数
@function cot($angle) {
  @return cos($angle) / sin($angle);
}


//反三角函数的阈值：
$default-threshold: pi() / 180 /100;

//查看value值是否有单位
@function concert-angle($value, $unit-name){
  $factors:(
    rad: 1rad,
    deg: 180deg / pi(),
    grad: 200grad /pi(),
    turn: .5turn /pi(),
  );
  @if not unitless($value){
    @warn '`#{$value}` should be unitless';
    @return false;
  }
  @if not map-has-key($factors, $unit-name) {
    @warn 'unit `#{$unit-name}` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`';
    @return false;
  }
  @return $value * map-get($factors, $unit-name);
}

//反正弦函数(返回弧度值)
@function asin($z, $unit-name: deg, $threshold: $default-threshold) {
  $sum: 0;
  $complement: false;
  $sign: if($z != 0, $z / abs($z), 1);
  $z: abs($z);
  @if $z > 1 {
    @warn 'illegal `#{$z}` value for function';
    @return false;
  }
  @if $z > sin(pi() / 4) {
    $complement: true;
    $z: sqrt(1 - pow($z, 2));
  }
  $term: $z;
  $i: 0;
  $k: 1;
  @while $term > $threshold {
    $sum: $sum + $term;
    $i: $i + 1;
    $k: $k * (2 * $i - 1) / (2 * $i);
    $j: 2 * $i + 1;
    $term: $k * pow($z, $j) / $j;
  }
  @return $sign*(if($complement, pi()/2 - $sum, $sum));
}
//反余弦函数
@function acos($cos, $unit-name: deg, $threshold: $default-threshold) {
  @return  pi() / 2 - asin($cos, $unit-name, $threshold);
}
//反正切函数
@function atan($tan, $unit-name: deg, $threshold: $default-threshold) {
  @return asin($tan / sqrt(1 + pow($tan, 2)), $unit-name, $threshold) ;
}
//反余切函数
@function acot($cot, $unit-name: deg, $threshold: $default-threshold) {
 @return asin(1 / sqrt(1 + pow($cot, 2)), $unit-name, $threshold);
}
//角度弧度换算
@function toReg($deg){
   @return $deg * pi() / 180;
}
@function toDeg($reg){
   @return $reg /  pi() * 180deg ;
}



